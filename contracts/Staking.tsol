pragma ever-solidity >= 0.64.0;
pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "@broxus/tip3/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "@broxus/tip3/contracts/interfaces/ITokenRoot.tsol";
import "@broxus/tip3/contracts/interfaces/ITokenWallet.tsol";

// // This interface for transferring NFT to winner
// import "@broxus/tip4/contracts/TIP4_1/interfaces/ITIP4_1NFT.tsol";
// // This interface to accept NFT from owner
// import "@broxus/tip4/contracts/TIP4_1/interfaces/INftTransfer.tsol";

contract Staking is IAcceptTokensTransferCallback {
    uint16  static _nonce; // some random value to affect on contract address
    address static _owner; // tokensale owner. will receive all transfers

    uint256 public constant BASE_APY = 50;
    uint256 public constant SECONDS_IN_YEAR = 31536000;

    address public _stakingTokenRoot;
    address public _stakingTokenWallet;
    address public _stakingNFTRoot;
    struct Stake {
        uint256 amount;
        uint256 timestamp;
        uint256[] nftIds;
    }
    mapping(address => Stake) public stakes;
    uint128 public totalStakedAmount;
    constructor(
        address stakingTokenRoot,
        address stakingNFTRoot,
        address sendRemainingGasTo
    ) public {
        tvm.accept();
        tvm.rawReserve(1 ever, 0); // we will always reserve 1 venom on this contract
        _stakingTokenRoot = stakingTokenRoot;
        _stakingNFTRoot = stakingNFTRoot;
        totalStakedAmount = 0;
        ITokenRoot(stakingTokenRoot).deployWallet {
            value: 0.2 ever,
            flag: 1,
            callback: Staking.onTokenWallet // this callback will be called by TokenRoot after deploying wallet for tokensale
        } (
            address(this),
            0.1 ever
        );
        sendRemainingGasTo.transfer({ value: 0, flag: 128, bounce: false });
    }
    function onTokenWallet(address value) external {
        require (
            msg.sender.value != 0 &&
            msg.sender == _stakingTokenRoot,
            101
        );
        tvm.rawReserve(1 ever, 0);
        _stakingTokenWallet = value; // store deployed tip3 wallet address
        _owner.transfer({ value: 0, flag: 128, bounce: false }); // sending remaining gas after setups
    }
    function onAcceptTokensTransfer(
        address, // tokenRoot,
        uint128 amount,
        address sender,
        address, // senderWallet,
        address remainingGasTo,
        TvmCell payload
    ) override external {
        tvm.rawReserve(1 ever, 0);
        totalStakedAmount = amount;
    }
    function stake(uint128 amount) external {

        // TvmCell empty;
        // ITokenWallet(msg.sender).transfer{value: 0, bounce: false}(
        //     amount, 
        //     _stakingTokenWallet, 
        //     0.1 ever, 
        //     msg.sender, 
        //     false, 
        //     empty
        // );
        // Stake stake = stakes[msg.sender];
        // stake.amount += amount;
        // stake.timestamp = now;
    }
    // function stake(uint256 amount) public {
    //     ITokenWallet(stakingTokenAddress).transfer{value: 0, bounce: false}(amount, sg.pubkey(), amount, false, 1);
    //     Stake stake = stakes[msg.sender];
    //     stake.amount += amount;
    //     stake.timestamp = now;
    //}

    // function stakeNFT(uint256 nftId) public {
    //     ITIP4_1NFT(stakingNFTAddress).transferFrom(msg.pubkey(), address(this), nftId);
    //     Stake storage stake = stakes[msg.pubkey()];
    //     stake.nftIds.push(nftId);
    // }
    
    // function claim() public {
    //     Stake stake = stakes[msg.pubkey()];
    //     require(stake.amount > 0, "No stake found");

    //     uint256 duration = now - stake.timestamp;
    //     uint256 apy = BASE_APY * (1 + 0.5 * stake.nftCount);
    //     uint256 reward = ((stake.amount * apy) / 100) * (duration / SECONDS_IN_YEAR);

    //     ITokenWallet(stakingTokenAddress).transfer{value: 0, bounce: false}(msg.pubkey(), reward, false, 1);
    //     stake.timestamp = now; // reset the timestamp to now after claiming
    // }

    // function unstake() public {
    //     Stake stake = stakes[msg.pubkey()];
    //     require(stake.amount > 0, "No stake found");

    //     uint256 duration = now - stake.timestamp;
    //     uint256 apy = BASE_APY * (1 + 0.5 * stake.nftIds.length);
    //     uint256 reward = ((stake.amount * apy) / 100) * (duration / SECONDS_IN_YEAR);

    //     ITokenWallet(stakingTokenAddress).transfer{value: 0, bounce: false}(msg.pubkey(), stake.amount + reward, false, 1);
    //     for (uint256 i = 0; i < stake.nftIds.length; i++) {
    //         ITIP4_1NFT(stakingNFTAddress).transferFrom(address(this), msg.pubkey(), stake.nftIds[i]);
    //     }
    //     delete stakes[msg.pubkey()];
    // }
}